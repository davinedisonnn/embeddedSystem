<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int n=6;
typedef int[1,n] id_t;
chan request_up1[n+1];
chan request_down1[n+1];
chan request_up2[n+1];
chan request_down2[n+1];
chan ack[n+1];</declaration>
	<template>
		<name x="5" y="5">Elevator1</name>
		<declaration>// Place local declarations here.
clock elapsedTime;
int currentFloor = 0;
int targetFloor = 0;
int elevatorState = 0; //0 = idle, 1 = up, 2 = down
int queueLength=0;
const int N=7;
int requestQueue[N];
int inputIndexLocation = 100;
int findLocationIndex = 0;
int sortIndex = 0;
void elevatorStateUpdate(){
    if (queueLength == 0){
        elevatorState = 0;
    }

    else if (queueLength != 0){
        if (requestQueue[0] &gt; currentFloor){
            elevatorState = 1;
        }
        
        else if (requestQueue[0] &lt; currentFloor){
            elevatorState = 2;
        }
    }
}

void ascend_enqueue(id_t newFloorNumberRequest){
    if (queueLength == 0){
        requestQueue [0] = newFloorNumberRequest;
         queueLength = queueLength + 1;   
    }

    else if (queueLength == 6){
        queueLength = 6;
    }

    else{
        inputIndexLocation = 100;
        //Find where the new request should be put inside the array 
        findLocationIndex = 0;
        sortIndex = queueLength - 1;
        while (findLocationIndex &lt; queueLength){
            if (inputIndexLocation == 100){
                if (requestQueue[findLocationIndex] &gt; newFloorNumberRequest){
                    inputIndexLocation = findLocationIndex;
                }
                
                else if (findLocationIndex + 1 == queueLength){
                    inputIndexLocation = findLocationIndex + 1;
                }
            }
            findLocationIndex = findLocationIndex + 1;
        }
        
        //Sorting previous queue to make space for the new request floor
        while (sortIndex &gt;= inputIndexLocation){
            requestQueue[sortIndex+1] = requestQueue[sortIndex];
            sortIndex = sortIndex - 1;
        }

        if (inputIndexLocation != 100){            
            requestQueue[inputIndexLocation] = newFloorNumberRequest;
            queueLength = queueLength + 1;
        }
    }
}


void descend_enqueue(id_t newFloorNumberRequest){
    if (queueLength == 0){
        requestQueue[0] = newFloorNumberRequest;
        queueLength = queueLength + 1;
    }

    else if (queueLength == 6){
        queueLength = 6;
    }

    else{
        inputIndexLocation = 100;
        //Find where the new request should be put inside the array 
        findLocationIndex = 0;
        sortIndex = queueLength-1;
        while (findLocationIndex &lt; queueLength){
            if (inputIndexLocation == 100){
                if (requestQueue[findLocationIndex] &lt; newFloorNumberRequest){
                    inputIndexLocation = findLocationIndex;
                }
                else if (findLocationIndex + 1 == queueLength){
                    inputIndexLocation = findLocationIndex + 1;
                }
            }
            findLocationIndex = findLocationIndex + 1;
        }
        
        //Sorting previous queue to make space for the new request floor
        while (sortIndex &gt;= inputIndexLocation){
            requestQueue[sortIndex+1] = requestQueue[sortIndex];
            sortIndex = sortIndex - 1;
        }

        if (inputIndexLocation != 100){            
            requestQueue[inputIndexLocation] = newFloorNumberRequest;
            queueLength = queueLength + 1;
        }
    }
}


void dequeue(){
    int dequeueIndex = 0;
    currentFloor = requestQueue[0];
    while (dequeueIndex &lt; queueLength-1){
        requestQueue[dequeueIndex] = requestQueue[dequeueIndex + 1];
        dequeueIndex++;
    }
    
    if (queueLength &gt; 0){
        requestQueue[queueLength-1] = 0;
        queueLength = queueLength-1;
    }

    else{
        requestQueue[0]=0;
        queueLength = 0;
     }
}


int front(){
   return requestQueue[0];
}


</declaration>
		<location id="id0" x="306" y="221">
			<name x="323" y="229">LoadingUnloading</name>
			<label kind="invariant" x="323" y="246">elapsedTime &lt; 5</label>
		</location>
		<location id="id1" x="-273" y="226">
			<name x="-241" y="188">MovingDown</name>
			<label kind="invariant" x="-241" y="205">elapsedTime &lt; 5</label>
		</location>
		<location id="id2" x="304" y="-52">
			<name x="187" y="-42">MovingUp</name>
			<label kind="invariant" x="178" y="-25">elapsedTime &lt; 5</label>
		</location>
		<location id="id3" x="-272" y="-51">
			<name x="-263" y="-93">Idle</name>
			<label kind="invariant" x="-263" y="-76">elapsedTime &lt; 5</label>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-462" y="-67">e : int [1,6]</label>
			<label kind="guard" x="-649" y="-50">e &lt; currentFloor &amp;&amp; queueLength == 0</label>
			<label kind="synchronisation" x="-513" y="-33">request_down1[e]?</label>
			<label kind="assignment" x="-530" y="-16">descend_enqueue(e), 
elevatorStateUpdate(), 
targetFloor = front()</label>
			<nail x="-317" y="10"/>
			<nail x="-377" y="10"/>
			<nail x="-377" y="-50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select" x="-348" y="-280">e : int [1,6]</label>
			<label kind="guard" x="-348" y="-263">e &gt; currentFloor &amp;&amp; queueLength == 0</label>
			<label kind="synchronisation" x="-348" y="-246">request_up1[e]?</label>
			<label kind="assignment" x="-348" y="-229">ascend_enqueue(e), 
elevatorStateUpdate(), 
targetFloor = front()</label>
			<nail x="-326" y="-109"/>
			<nail x="-326" y="-169"/>
			<nail x="-275" y="-169"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-326" y="358">currentFloor != targetFloor</label>
			<label kind="assignment" x="-326" y="375">currentFloor = currentFloor - 1</label>
			<nail x="-207" y="256"/>
			<nail x="-207" y="341"/>
			<nail x="-275" y="341"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="399" y="-42">currentFloor != targetFloor</label>
			<label kind="assignment" x="399" y="-25">currentFloor = currentFloor + 1</label>
			<nail x="391" y="-51"/>
			<nail x="391" y="8"/>
			<nail x="340" y="9"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="-453" y="222">e : int [1,6]</label>
			<label kind="guard" x="-496" y="239">e &lt; currentFloor &amp;&amp; currentFloor!=targetFloor</label>
			<label kind="synchronisation" x="-504" y="256">request_down1[e]?</label>
			<label kind="assignment" x="-513" y="273">descend_enqueue(e), 
targetFloor = front()</label>
			<nail x="-309" y="281"/>
			<nail x="-368" y="281"/>
			<nail x="-368" y="222"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select" x="306" y="-229">e : int[1,6]</label>
			<label kind="guard" x="306" y="-212">e &gt; currentFloor &amp;&amp; currentFloor!=targetFloor</label>
			<label kind="synchronisation" x="306" y="-195">request_up1[e]?</label>
			<label kind="assignment" x="306" y="-178">ascend_enqueue(e), 
targetFloor=front()</label>
			<nail x="306" y="-136"/>
			<nail x="365" y="-136"/>
			<nail x="365" y="-93"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="assignment" x="-51" y="102">dequeue(), 
targetFloor = front(),
elevatorStateUpdate(), 
elapsedTime = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="314" y="76">currentFloor == targetFloor</label>
			<label kind="synchronisation" x="314" y="93">ack[currentFloor]!</label>
			<label kind="assignment" x="314" y="110">elapsedTime = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-17" y="229">currentFloor == targetFloor</label>
			<label kind="synchronisation" x="-17" y="246">ack[currentFloor]!</label>
			<label kind="assignment" x="-17" y="263">targetFloor = front(),
elapsedTime = 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-765" y="102">targetFloor &lt; currentFloor &amp;&amp; elevatorState == 2 &amp;&amp; queueLength &gt; 0</label>
			<label kind="assignment" x="-408" y="119">elapsedTime = 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-195" y="-127">targetFloor &gt; currentFloor &amp;&amp; elevatorState == 1 &amp;&amp; queueLength &gt;0</label>
			<label kind="assignment" x="-17" y="-51">elapsedTime = 0</label>
		</transition>
	</template>
	<template>
		<name>Elevator2</name>
		<declaration>// Place local declarations here.
clock elapsedTime2;
int currentFloor = 0;
int targetFloor = 0;
int elevatorState = 0; //0 = idle, 1 = up, 2 = down
int queueLength=0;
const int N=7;
int requestQueue[N];
int inputIndexLocation = 100;
int findLocationIndex = 0;
int sortIndex = 0;
void elevatorStateUpdate(){
    if (queueLength == 0){
        elevatorState = 0;
    }

    else if (queueLength != 0){
        if (requestQueue[0] &gt; currentFloor){
            elevatorState = 1;
        }
        
        else if (requestQueue[0] &lt; currentFloor){
            elevatorState = 2;
        }
    }
}

void ascend_enqueue(id_t newFloorNumberRequest){
    if (queueLength == 0){
        requestQueue [0] = newFloorNumberRequest;
         queueLength = queueLength + 1;   
    }

    else if (queueLength == 6){
        queueLength = 6;
    }

    else{
        inputIndexLocation = 100;
        //Find where the new request should be put inside the array 
        findLocationIndex = 0;
        sortIndex = queueLength - 1;
        while (findLocationIndex &lt; queueLength){
            if (inputIndexLocation == 100){
                if (requestQueue[findLocationIndex] &gt; newFloorNumberRequest){
                    inputIndexLocation = findLocationIndex;
                }
                
                else if (findLocationIndex + 1 == queueLength){
                    inputIndexLocation = findLocationIndex + 1;
                }
            }
            findLocationIndex = findLocationIndex + 1;
        }
        
        //Sorting previous queue to make space for the new request floor
        while (sortIndex &gt;= inputIndexLocation){
            requestQueue[sortIndex+1] = requestQueue[sortIndex];
            sortIndex = sortIndex - 1;
        }

        if (inputIndexLocation != 100){            
            requestQueue[inputIndexLocation] = newFloorNumberRequest;
            queueLength = queueLength + 1;
        }
    }
}


void descend_enqueue(id_t newFloorNumberRequest){
    if (queueLength == 0){
        requestQueue[0] = newFloorNumberRequest;
        queueLength = queueLength + 1;
    }

    else if (queueLength == 6){
        queueLength = 6;
    }

    else{
        inputIndexLocation = 100;
        //Find where the new request should be put inside the array 
        findLocationIndex = 0;
        sortIndex = queueLength-1;
        while (findLocationIndex &lt; queueLength){
            if (inputIndexLocation == 100){
                if (requestQueue[findLocationIndex] &lt; newFloorNumberRequest){
                    inputIndexLocation = findLocationIndex;
                }
                else if (findLocationIndex + 1 == queueLength){
                    inputIndexLocation = findLocationIndex + 1;
                }
            }
            findLocationIndex = findLocationIndex + 1;
        }
        
        //Sorting previous queue to make space for the new request floor
        while (sortIndex &gt;= inputIndexLocation){
            requestQueue[sortIndex+1] = requestQueue[sortIndex];
            sortIndex = sortIndex - 1;
        }

        if (inputIndexLocation != 100){            
            requestQueue[inputIndexLocation] = newFloorNumberRequest;
            queueLength = queueLength + 1;
        }
    }
}


void dequeue(){
    int dequeueIndex = 0;
    currentFloor = requestQueue[0];
    while (dequeueIndex &lt; queueLength-1){
        requestQueue[dequeueIndex] = requestQueue[dequeueIndex + 1];
        dequeueIndex++;
    }
    
    if (queueLength &gt; 0){
        requestQueue[queueLength-1] = 0;
        queueLength = queueLength-1;
    }

    else{
        requestQueue[0]=0;
        queueLength = 0;
     }
}


int front(){
   return requestQueue[0];
}


</declaration>
		<location id="id4" x="306" y="153">
			<name x="323" y="161">LoadingUnloading</name>
			<label kind="invariant" x="323" y="178">elapsedTime2 &lt; 5</label>
		</location>
		<location id="id5" x="-280" y="153">
			<name x="-263" y="119">MovingDown</name>
			<label kind="invariant" x="-263" y="136">elapsedTime2 &lt; 5</label>
		</location>
		<location id="id6" x="304" y="-120">
			<name x="229" y="-110">MovingUp</name>
			<label kind="invariant" x="187" y="-85">elapsedTime2 &lt; 5</label>
		</location>
		<location id="id7" x="-279" y="-124">
			<name x="-263" y="-161">Idle</name>
			<label kind="invariant" x="-263" y="-144">elapsedTime2 &lt; 5</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-469" y="-140">e : int [1,6]</label>
			<label kind="guard" x="-664" y="-123">e &lt; currentFloor &amp;&amp; queueLength == 0</label>
			<label kind="synchronisation" x="-528" y="-106">request_down1[e]?</label>
			<label kind="assignment" x="-545" y="-89">descend_enqueue(e), 
elevatorStateUpdate(), 
targetFloor = front()</label>
			<nail x="-324" y="-63"/>
			<nail x="-384" y="-63"/>
			<nail x="-384" y="-123"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-367" y="-344">e : int [1,6]</label>
			<label kind="guard" x="-367" y="-327">e &gt; currentFloor &amp;&amp; queueLength == 0</label>
			<label kind="synchronisation" x="-367" y="-310">request_up1[e]?</label>
			<label kind="assignment" x="-367" y="-293">ascend_enqueue(e), 
elevatorStateUpdate(), 
targetFloor = front()</label>
			<nail x="-333" y="-182"/>
			<nail x="-333" y="-242"/>
			<nail x="-273" y="-242"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-333" y="268">currentFloor != targetFloor</label>
			<label kind="assignment" x="-333" y="285">currentFloor = currentFloor - 1</label>
			<nail x="-214" y="183"/>
			<nail x="-214" y="251"/>
			<nail x="-282" y="251"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="416" y="-119">currentFloor != targetFloor</label>
			<label kind="assignment" x="416" y="-102">currentFloor = currentFloor + 1</label>
			<nail x="408" y="-119"/>
			<nail x="408" y="-59"/>
			<nail x="340" y="-59"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-460" y="149">e : int [1,6]</label>
			<label kind="guard" x="-503" y="166">e &lt; currentFloor &amp;&amp; currentFloor!=targetFloor</label>
			<label kind="synchronisation" x="-511" y="183">request_down1[e]?</label>
			<label kind="assignment" x="-528" y="200">descend_enqueue(e), 
targetFloor = front()</label>
			<nail x="-316" y="208"/>
			<nail x="-375" y="208"/>
			<nail x="-375" y="149"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="306" y="-306">e : int[1,6]</label>
			<label kind="guard" x="306" y="-289">e &gt; currentFloor &amp;&amp; currentFloor!=targetFloor</label>
			<label kind="synchronisation" x="306" y="-272">request_up1[e]?</label>
			<label kind="assignment" x="306" y="-255">ascend_enqueue(e), 
targetFloor=front()</label>
			<nail x="306" y="-204"/>
			<nail x="408" y="-204"/>
			<nail x="408" y="-170"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="assignment" x="-110" y="8">dequeue(), 
targetFloor = front(),
elevatorStateUpdate(), 
elapsedTime2 = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="314" y="17">currentFloor == targetFloor</label>
			<label kind="synchronisation" x="314" y="34">ack[currentFloor]!</label>
			<label kind="assignment" x="314" y="51">elapsedTime2 = 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-17" y="161">currentFloor == targetFloor</label>
			<label kind="synchronisation" x="-17" y="178">ack[currentFloor]!</label>
			<label kind="assignment" x="-17" y="195">targetFloor = front(),
elapsedTime2 = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="-773" y="25">targetFloor &lt; currentFloor &amp;&amp; elevatorState == 2 &amp;&amp; queueLength &gt; 0</label>
			<label kind="assignment" x="-401" y="47">elapsedTime2 = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-127" y="-144">targetFloor &gt; currentFloor &amp;&amp; elevatorState == 1 &amp;&amp; queueLength &gt; 0</label>
			<label kind="assignment" x="-25" y="-119">elapsedTime2 = 0</label>
		</transition>
	</template>
	<template>
		<name>Floors</name>
		<parameter>const id_t floorNumber</parameter>
		<location id="id8" x="-467" y="-42">
			<name x="-569" y="-76">DownRequest</name>
		</location>
		<location id="id9" x="119" y="-42">
			<name x="127" y="-76">UpRequest</name>
		</location>
		<location id="id10" x="-161" y="-42">
			<name x="-171" y="-72">Idle</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-76" y="-127">ack[floorNumber]?</label>
			<nail x="-17" y="-102"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-365" y="-119">ack[floorNumber]?</label>
			<nail x="-314" y="-102"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-408" y="-42">request_down1[floorNumber]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-110" y="-34">request_up1[floorNumber]!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// Process = Template();
// List one or more processes to be composed into a system.
system Elevator1, Elevator2, Floors;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Floors(1).DownRequest --&gt; Floors(1).Idle</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Floors(2).UpRequest --&gt; Floors(2).Idle</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Elevator1.MovingUp --&gt; Elevator1.LoadingUnloading</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==2)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==4)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (Elevator1.LoadingUnloading &amp;&amp; Elevator1.currentFloor==6)</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
